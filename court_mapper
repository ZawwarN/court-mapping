# Load necessary libraries
library(ggplot2)
library(tidyverse)
library(devtools)
library(ncaahoopR)
library(extrafont)
library(cowplot)
library(wehoop) # Make sure to install this package if you haven't already

# Function to generate points for a circle
circle_points = function(center = c(0, 0), radius = 1, npoints = 360) {
  angles = seq(0, 2 * pi, length.out = npoints)
  return(tibble(x = center[1] + radius * cos(angles),
                y = center[2] + radius * sin(angles)))
}

# Function to generate points for a semicircle
semicircle_points = function(center = c(0, 0), radius = 1, npoints = 180, start_angle = pi) {
  angles = seq(start_angle, start_angle + pi, length.out = npoints)
  return(tibble(x = center[1] + radius * cos(angles),
                y = center[2] + radius * sin(angles)))
}

# Function to stretch y-coordinates of semicircle points
stretch_y = function(points, stretch_factor) {
  points$y = points$y * stretch_factor
  return(points)
}

# Manually defining points for the custom shape
custom_shape_points = function() {
  tibble(
    x = c(25, 25, 0, 0, 7, 10, 13, 16, 22.5, -25, -25, 0, 0, -7, -10, -13, -16, -22.5),
    y = c(14, 32, 32, 29, 28, 27, 25.5, 23, 14, 14, 32, 32, 29, 28, 27, 25.5, 23, 14)
  )
}

# Court dimensions and lines
width = 50
height = 94 / 2
key_height = 19
inner_key_width = 12
outer_key_width = 16
backboard_width = 6
backboard_offset = 4
neck_length = 0.5
hoop_radius = 0.75
hoop_center_y = backboard_offset + neck_length + hoop_radius
three_point_radius = 23.75
three_point_side_radius = 22
three_point_side_height = 14

# Court themes
court_themes = list(
  light = list(
    court = 'floralwhite',
    lines = '#999999',
    text = '#222222',
    made = '#00bfc4',
    missed = '#f8766d',
    hex_border_size = 1,
    hex_border_color = "#000000"
  ),
  dark = list(
    court = '#000004',
    lines = '#999999',
    text = '#f0f0f0',
    made = '#00bfc4',
    missed = '#f8766d',
    hex_border_size = 0,
    hex_border_color = "#000000"
  ),
  ppt = list(
    court = 'gray15',
    lines = 'white',
    text = '#f0f0f0',
    made = '#00bfc4',
    missed = '#f8766d',
    hex_border_size = 0,
    hex_border_color = "gray15"
  )
)

# Function to create court plot
plot_court = function(court_theme = court_themes$light, use_short_three = FALSE, fg_data = NULL, semicircle_data = NULL, custom_shape_data = NULL) {
  if (use_short_three) {
    three_point_radius = 22
    three_point_side_height = 0
  }
  
  court_points = tibble(
    x = c(width / 2, width / 2, -width / 2, -width / 2, width / 2),
    y = c(height, 0, 0, height, height),
    desc = "perimeter"
  )
  
  court_points = bind_rows(court_points , tibble(
    x = c(outer_key_width / 2, outer_key_width / 2, -outer_key_width / 2, -outer_key_width / 2),
    y = c(0, key_height, key_height, 0),
    desc = "outer_key"
  ))
  
  court_points = bind_rows(court_points , tibble(
    x = c(-backboard_width / 2, backboard_width / 2),
    y = c(backboard_offset, backboard_offset),
    desc = "backboard"
  ))
  
  court_points = bind_rows(court_points , tibble(
    x = c(0, 0), y = c(backboard_offset, backboard_offset + neck_length), desc = "neck"
  ))
  
  foul_circle = circle_points(center = c(0, key_height), radius = inner_key_width / 2)
  
  foul_circle_top = filter(foul_circle, y > key_height) %>%
    mutate(desc = "foul_circle_top")
  
  foul_circle_bottom = filter(foul_circle, y < key_height) %>%
    mutate(
      angle = atan((y - key_height) / x) * 180 / pi,
      angle_group = floor((angle - 5.625) / 11.25),
      desc = paste0("foul_circle_bottom_", angle_group)
    ) %>%
    filter(angle_group %% 2 == 0) %>%
    select(x, y, desc)
  
  hoop = circle_points(center = c(0, hoop_center_y), radius = hoop_radius) %>%
    mutate(desc = "hoop")
  
  restricted = circle_points(center = c(0, hoop_center_y), radius = 4) %>%
    filter(y >= hoop_center_y) %>%
    mutate(desc = "restricted")
  
  three_point_circle = circle_points(center = c(0, hoop_center_y), radius = three_point_radius) %>%
    filter(y >= three_point_side_height, y >= hoop_center_y)
  
  three_point_line = tibble(
    x = c(three_point_side_radius, three_point_side_radius, three_point_circle$x, -three_point_side_radius, -three_point_side_radius),
    y = c(0, three_point_side_height, three_point_circle$y, three_point_side_height, 0),
    desc = "three_point_line"
  )
  
  court_points = bind_rows(
    court_points,
    foul_circle_top,
    foul_circle_bottom,
    hoop,
    restricted,
    three_point_line
  )
  
  p <- ggplot() +
    geom_path(
      data = court_points,
      aes(x = x, y = y, group = desc),
      color = court_theme$lines
    ) +
    coord_fixed(ylim = c(0, 45), xlim = c(-25, 25)) +
    theme_minimal(base_size = 22) +
    theme(
      text = element_text(color = court_theme$text),
      plot.background = element_rect(fill = 'gray15', color = 'gray15'),
      panel.background = element_rect(fill = court_theme$court, color = court_theme$court),
      panel.grid = element_blank(),
      panel.border = element_blank(),
      axis.text = element_blank(),
      axis.title = element_blank(),
      axis.ticks = element_blank(),
      legend.background = element_rect(fill = court_theme$court, color = court_theme$court),
      legend.margin = margin(-1, 0, 0, 0, unit = "lines"),
      legend.position = "bottom",
      legend.key = element_blank(),
      legend.text = element_text(size = rel(1.0))
    )
  
  if (!is.null(fg_data)) {
    # Plotting rectangles for the FG% data
    p <- p + geom_rect(
      data = fg_data,
      aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax, fill = as.numeric(fg_percentage)),
      alpha = 0.5
    ) +
      geom_text(
        data = fg_data,
        aes(x = (xmin + xmax) / 2, y = (ymin + ymax) / 2, label = scales::percent(fg_percentage, accuracy = 1)),
        color = "black", size = 3, vjust = 0.5
      )
  }
  
  if (!is.null(semicircle_data)) {
    p <- p + geom_polygon(
      data = semicircle_data,
      aes(x = x, y = y, fill = as.numeric(fg_percentage)),
      alpha = 0.5
    ) +
      geom_text(
        data = semicircle_data,
        aes(x = mean(x), y = mean(y), label = scales::percent(fg_percentage, accuracy = 1)),
        color = "black", size = 3, vjust = 0.5
      )
  }
  
  if (!is.null(custom_shape_data)) {
    p <- p + geom_polygon(
      data = custom_shape_data,
      aes(x = x, y = y, fill = as.numeric(fg_percentage)),
      alpha = 0.5
    ) +
      geom_text(
        data = custom_shape_data,
        aes(x = mean(x), y = mean(y), label = scales::percent(fg_percentage, accuracy = 1)),
        color = "black", size = 3, vjust = 0.5
      )
  }
  
  p <- p + scale_fill_gradientn(
    colors = c("red", "orange", "yellow", "lightgreen", "green"),
    name = "FG%",
    limits = c(0.1, 0.9), # Set the limits for the gradient scale
    breaks = c(0.1, 0.25, 0.50, 0.75, 0.9), # Specify a wider range of FG% values
    labels = scales::percent_format(accuracy = 1),
    guide = guide_colorbar(
      title.position = "top",
      title.hjust = 0.5,
      barwidth = unit(8, "lines"),
      barheight = unit(0.5, "lines"),
      label.theme = element_text(size = 10) # Adjust the font size for the labels
    )
  )
  
  return(p)
}

# Fetching real FG% data using wehoop package
fg_data_real <- wnba_leaguedashteamshotlocations(season = most_recent_wnba_season() - 1, team_id = "1611661313")$ShotLocations %>%
  filter(TEAM_ID == "1611661313") %>%
  select(
    Restricted_Area_FG_PCT,
    In_The_Paint_Non_RA_FG_PCT,
    Mid_Range_FG_PCT,
    Left_Corner_3_FG_PCT,
    Right_Corner_3_FG_PCT,
    Above_the_Break_3_FG_PCT
  ) %>%
  pivot_longer(cols = everything(), names_to = "area", values_to = "fg_percentage") %>%
  mutate(fg_percentage = as.numeric(fg_percentage))

# Example FG% data for different court areas
fg_data <- tibble(
  area = c(
    "Restricted_Area_FG_PCT",
    "In_The_Paint_Non_RA_FG_PCT",
    "Mid_Range_FG_PCT",
    "Mid_Range_FG_PCT",
    "Left_Corner_3_FG_PCT",
    "Right_Corner_3_FG_PCT"
  ),
  xmin = c(-8, -8, -22, 22, -25, 22),
  xmax = c(8, 8, -8, 8, -22, 25),
  ymin = c(0, 8, 0, 0, 0, 0),
  ymax = c(8, 14.19, 14.19, 14.19, 14.19, 14.19)
)

# Merging the FG% data
fg_data <- left_join(fg_data, fg_data_real, by = "area")

# Generate the semicircle data
semicircle_data <- semicircle_points(
  center = c(0, 21),
  radius = three_point_radius * 0.9,
  start_angle = 2 * pi
) %>%
  mutate(area = "Mid_Range_FG_PCT") %>%
  left_join(fg_data_real, by = "area") %>%
  stretch_y(stretch_factor = 0.675)  # Adjust stretch_factor as needed

# Generate the custom shape data
custom_shape_data <- custom_shape_points() %>%
  mutate(area = "Above_the_Break_3_FG_PCT") %>%
  left_join(fg_data_real, by = "area")

# Plot the court with FG% data
p <- plot_court(court_themes$ppt, fg_data = fg_data, semicircle_data = semicircle_data, custom_shape_data = custom_shape_data)

# Display the plot
print(p)
